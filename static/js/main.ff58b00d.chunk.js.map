{"version":3,"sources":["Intro.tsx","components/Loading.tsx","lightenDarkenColor.ts","Query.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Intro","history","useHistory","useState","sentence","setSentence","className","onSubmit","evt","preventDefault","push","encodeURIComponent","required","type","value","onChange","target","to","Loading","lightenDarkenColor","col","amt","usePound","slice","num","parseInt","r","b","g","toString","normBias","bias","Math","min","abs","biasColor","baseColor","isMaleBias","isUnbiased","biasText","gender","norm","amount","Query","query","URLSearchParams","useLocation","search","get","useGet","path","process","data","error","loading","message","results","map","result","i","classNames","token","style","width","background","App","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff58b00d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Intro.css';\nimport { Link, useHistory } from 'react-router-dom';\n\nconst Intro = () => {\n  const history = useHistory();\n  const [sentence, setSentence] = useState('');\n  return (\n    <div className=\"Intro\">\n      <header className=\"Intro-header\">Gender Bias Viewer</header>\n      <p>\n        Enter a sentence in English below to view the gender bias in each word\n      </p>\n      <form\n        className=\"Intro-searchForm\"\n        onSubmit={evt => {\n          evt.preventDefault();\n          history.push(`/query?sentence=${encodeURIComponent(sentence)}`);\n        }}\n      >\n        <input\n          className=\"Intro-search\"\n          required\n          type=\"text\"\n          value={sentence}\n          onChange={evt => setSentence(evt.target.value)}\n        />\n        <button className=\"Intro-go\">Go</button>\n      </form>\n      <p className=\"Intro-inspiration\">\n        Need some inspiration? Try these:\n        <br />\n        <Link to=\"/query?sentence=The doctor liked to gossip\">\n          The doctor liked to gossip\n        </Link>\n        <br />\n        <Link to=\"/query?sentence=The librarian found gave him a book about a genius scientist\">\n          The librarian found gave him a book about a genius scientist\n        </Link>\n      </p>\n    </div>\n  );\n};\n\nexport default Intro;\n","import React from \"react\";\n\nimport \"./Loading.css\";\n\nconst Loading = () => <div className=\"Loading\">â—‘</div>;\n\nexport default Loading;\n","/**\n *  helper to tweak css color values, from https://css-tricks.com/snippets/javascript/lighten-darken-color\n * @param col the color as a string\n * @param amt amount to change the color, from -255 to 255\n */\nconst lightenDarkenColor = (col: string, amt: number) => {\n  var usePound = false;\n\n  if (col[0] === '#') {\n    col = col.slice(1);\n    usePound = true;\n  }\n\n  var num = parseInt(col, 16);\n\n  var r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if (r < 0) r = 0;\n\n  var b = ((num >> 8) & 0x00ff) + amt;\n\n  if (b > 255) b = 255;\n  else if (b < 0) b = 0;\n\n  var g = (num & 0x0000ff) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound ? '#' : '') + (g | (b << 8) | (r << 16)).toString(16);\n};\n\nexport default lightenDarkenColor;\n","import React, { useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useGet } from 'restful-react';\nimport classNames from 'classnames';\n\nimport Loading from './components/Loading';\nimport './Query.css';\nimport lightenDarkenColor from './lightenDarkenColor';\n\nconst API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:5000';\n\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\ninterface ApiResults {\n  results: {\n    token: string;\n    bias: number;\n  }[];\n}\n\nconst MAX_BIAS = 0.3;\n\nconst normBias = (bias: number): number =>\n  Math.min(Math.abs(bias), MAX_BIAS) / MAX_BIAS;\n\nconst biasWidth = (bias: number): string => `${50 * normBias(bias)}%`;\n\nconst biasColor = (bias: number): string => {\n  const baseColor = isMaleBias(bias) ? '#3F8EAA' : '#AA3F8E';\n  return lightenDarkenColor(baseColor, (1 - normBias(bias)) * 120);\n};\n\nconst isUnbiased = (bias: number) => normBias(bias) < 0.1;\n\nconst isMaleBias = (bias: number) => bias > 0;\n\nconst biasText = (bias: number): string => {\n  if (isUnbiased(bias)) return 'unbiased';\n  const gender = isMaleBias(bias) ? 'male' : 'female';\n  const norm = normBias(bias);\n  let amount = 'slight';\n  if (norm > 0.3) amount = 'moderate';\n  if (norm > 0.6) amount = 'strong';\n  return `${amount} ${gender} bias`;\n};\n\nconst Query = () => {\n  const query = useQuery();\n  const history = useHistory();\n  const [sentence, setSentence] = useState(query.get('sentence') || '');\n  const { data, error, loading } = useGet<ApiResults>({\n    path: `${API_HOST}/detect?sentence=${encodeURIComponent(\n      query.get('sentence') ?? '',\n    )}`,\n  });\n  return (\n    <div className=\"Query\">\n      <header className=\"Query-header\">Gender Bias Viewer</header>\n      <form\n        onSubmit={evt => {\n          evt.preventDefault();\n          history.push(`/query?sentence=${encodeURIComponent(sentence)}`);\n        }}\n      >\n        <input\n          className=\"Query-search\"\n          type=\"text\"\n          value={sentence}\n          onChange={evt => setSentence(evt.target.value)}\n        />\n        <button className=\"Query-searchButton\">Update</button>\n      </form>\n      {loading && <Loading />}\n      {error && (\n        <div className=\"Query-error\">\n          <div className=\"Query-errorInner\">{error.message}</div>\n        </div>\n      )}\n      <div className=\"Query-results\">\n        {data?.results.map((result, i) => (\n          <div\n            key={i}\n            className={classNames('Query-result', {\n              'is-maleBias': isMaleBias(result.bias),\n              'is-femaleBias': !isMaleBias(result.bias),\n              'is-unbiased': isUnbiased(result.bias),\n            })}\n          >\n            <div>{result.token}</div>\n            <div\n              className=\"Query-resultBias\"\n              style={{\n                width: biasWidth(result.bias),\n                background: biasColor(result.bias),\n              }}\n            >\n              <div\n                className=\"Query-resultBiasPointer\"\n                style={{\n                  [isMaleBias(result.bias)\n                    ? 'borderRightColor'\n                    : 'borderLeftColor']: biasColor(result.bias),\n                }}\n              />\n            </div>\n            <div className=\"Query-resultBiasText\">{biasText(result.bias)}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Query;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Intro from \"./Intro\";\nimport Query from \"./Query\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Intro />\n          </Route>\n          <Route exact path=\"/query\">\n            <Query />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}